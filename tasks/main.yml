---
# tasks file for ansible-wal-g
- name: wal-g | check binary installed
  stat:
    path: "{{ walg_binary }}"
  register: walg_current_binary
  changed_when: false
  tags:
    - always

- name: wal-g | get current binary version
  shell: |
    set -o pipefail
    sudo -Hu nobody timeout 2 {{ walg_binary }} --version 2>&1 | grep -Eoi '([0-9]{1,}\.){1,3}[0-9]{1,}(|-[a-z0-9\.]{1,})' | sort -uV | head -1
  args:
    executable: /bin/bash
  register: walg_current_version
  changed_when: false
  check_mode: false
  when:
    - walg_current_binary.stat.exists
  tags:
    - always

- name: wal-g | download with unarchive when upgrade or downgrade
  unarchive:
    src: "{{ walg_url }}"
    dest: "{{ walg_binary | dirname }}"
    exclude:
      - 'README.md'
      - 'LICENSE'
    remote_src: true
    owner: root
    group: root
    mode: 0755
  when:
    - not walg_current_binary.stat.exists or walg_current_version.stdout is version(walg_version, '!=')
  tags:
    - always

- name: wal-g | combine env config
  block:
    - set_fact:
        walg_aws_combine: "{{ walg_aws_config | combine(walg_aws_override) | dict2items(key_name='option', value_name='value') }}"
    - set_fact:
        walg_azure_combine: "{{ walg_azure_config | combine(walg_azure_override) | dict2items(key_name='option', value_name='value') }}"
    - set_fact:
        walg_gcs_combine: "{{ walg_gcs_config | combine(walg_gcs_override) | dict2items(key_name='option', value_name='value') }}"
    - set_fact:
        walg_swift_combine: "{{ walg_swift_config | combine(walg_swift_override) | dict2items(key_name='option', value_name='value') }}"
    - set_fact:
        walg_filesystem_combine: "{{ walg_filesystem_config | combine(walg_filesystem_override) | dict2items(key_name='option', value_name='value') }}"
    - set_fact:
        walg_mongodb_combine: "{{ walg_mongodb_config | combine(walg_mongodb_override) | dict2items(key_name='option', value_name='value') }}"
    - set_fact:
        walg_mysql_combine: "{{ walg_mysql_config | combine(walg_mysql_override) | dict2items(key_name='option', value_name='value') }}"
    - set_fact:
        walg_postgresql_combine: "{{ walg_postgresql_config | combine(walg_postgresql_override) | dict2items(key_name='option', value_name='value') }}"
    - set_fact:
        walg_common_combine: "{{ walg_common_config | combine(walg_common_override) | dict2items(key_name='option', value_name='value') }}"
  tags:
    - always

- name: wal-g | check env directory
  file:
    path: "{{ walg_env | dirname }}"
    state: directory
    mode: 0755
  tags:
    - always

- name: wal-g | create env file
  template:
    src: 'walg_env.j2'
    dest: "{{ walg_env }}"
    owner: root
    group: adm
    mode: 0644
  tags:
    - always

- name: wal-g | check scripts directory
  file:
    path: "{{ walg_script_path }}"
    state: directory
    mode: 0755
  tags:
    - always

- name: wal-g | create scripts files
  template:
    src: "{{ item }}"
    dest: "{{ walg_script_path }}/{{ item | basename | regex_replace('.j2','') }}"
    backup: no
    owner: root
    group: adm
    mode: 0755
  with_fileglob:
    - ../templates/*.sh.j2
  tags:
    - always

- name: wal-g | create cron job for create backups
  cron:
    name: Create wal-g backups
    hour: '1'
    minute: '0'
    user: "{{ walg_user }}"
    job: "{{ walg_script_path }}/walg-backup.sh"
    state: "{{ walg_cron_enabled | ternary('present', 'absent') }}"
  tags:
    - always

- name: wal-g | create cron job for rotate backups
  cron:
    name: Rotate wal-g backups
    hour: '0'
    minute: '0'
    user: "{{ walg_user }}"
    job: "{{ walg_script_path }}/walg-rotate.sh"
    state: "{{ walg_cron_enabled | ternary('present', 'absent') }}"
  tags:
    - always
